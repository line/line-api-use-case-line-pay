# Stack:demo-line-pay
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  LINE-Pay-Demo

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 30
    MemorySize: !FindInMap [EnvironmentMap, !Ref Environment, LambdaMemorySize]

Parameters:
  Environment:
    Type: String
    AllowedValues:
      - dev
      - prod
    Default: dev

Mappings:
  EnvironmentMap:
    dev:
      LinePayChannelId: LinePayChannelId
      LinePayChannelSecret: LinePayChannelSecret
      LinePayIsSandbox: True or False
      LINEPayOrderInfoDBName: LINEPayOrderInfoDBName
      FrontS3BucketName: bucket name for frontend
      LayerVersion: layer version
      LoggerLevel: INFO or DEBUG
      LambdaMemorySize: 128 to 3008
      # TTL is True:Reservation Data will be deleted at the specified date, False:Data will not be deleted
      TTL: False
      # Set day to delete data
      # If you set TTL: True, data will be deleted in the period specified below.
      TTLDay: 10
      # ### ACCESS LOG SETTING ###
      # LogS3Bucket: bucket name for access log
      # LogFilePrefix: log file prefix/
      # ### ACCESS LOG SETTING ###
    prod:
      LinePayChannelId: LinePayChannelId
      LinePayChannelSecret: LinePayChannelSecret
      LinePayIsSandbox: True or False
      LINEPayOrderInfoDBName: LINEPayOrderInfoDBNameProd
      FrontS3BucketName: bucket name for frontend
      LayerVersion: layer version
      LoggerLevel: INFO or DEBUG
      LambdaMemorySize: 128 to 3008
      TTL: False or True
      TTLDay: Data Delete Day
      # ### ACCESS LOG SETTING ###
      # LogS3Bucket: bucket name for access log
      # LogFilePrefix: log file prefix/
      # ### ACCESS LOG SETTING ###

Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: logs:PutLogEvents
                Resource: !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}*:*:*"
              - Effect: Allow
                Action:    
                - logs:CreateLogStream              
                - dynamodb:PutItem
                - dynamodb:GetItem
                Resource:                 
                - !Sub "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${AWS::StackName}*:*"
                - !GetAtt LINEPayOrderInfoDB.Arn
              - Effect: Allow
                Action: logs:CreateLogGroup
                Resource: "*"
      RoleName: !Sub "${AWS::StackName}-LambdaRole"
  ReserveFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: backend/
      Handler: reserve.lambda_handler
      Runtime: python3.8
      Layers:
        - !Join 
          - ":"
          - - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer"
            - !ImportValue LinePayLayerDev
            - !FindInMap [EnvironmentMap, !Ref Environment, LayerVersion]
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          LINE_PAY_CHANNEL_ID: !FindInMap [EnvironmentMap, !Ref Environment, LinePayChannelId]
          LINE_PAY_CHANNEL_SECRET: !FindInMap [EnvironmentMap, !Ref Environment, LinePayChannelSecret]
          LINE_PAY_IS_SANDBOX: !FindInMap [EnvironmentMap, !Ref Environment, LinePayIsSandbox]
          LINE_PAY_ORDER_INFO_DB: !FindInMap [EnvironmentMap, !Ref Environment, LINEPayOrderInfoDBName]
          CONFIRM_URL: !Sub https://${CloudFrontDistribution.DomainName}/confirm.html
          CANCEL_URL: !Sub https://${CloudFrontDistribution.DomainName}/
          PAYMENT_IMG_URL: !Sub https://media.istockphoto.com/vectors/shopping-basket-with-foods-healthy-organic-fresh-and-natural-fo-vector-id534195952?s=612x612
          LOGGER_LEVEL: !FindInMap [EnvironmentMap, !Ref Environment, LoggerLevel]
          TTL_DAY: !FindInMap [EnvironmentMap, !Ref Environment, TTLDay]
      Events:
        ReservePayment:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /reserve
            Method: post
            RestApiId:
              Ref: LinepayApiGatewayApi

  ConfirmFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: backend/
      Handler: confirm.lambda_handler
      Runtime: python3.8
      Layers:
        - !Join 
          - ":"
          - - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer"
            - !ImportValue LinePayLayerDev
            - !FindInMap [EnvironmentMap, !Ref Environment, LayerVersion]
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          LINE_PAY_CHANNEL_ID: !FindInMap [EnvironmentMap, !Ref Environment, LinePayChannelId]
          LINE_PAY_CHANNEL_SECRET: !FindInMap [EnvironmentMap, !Ref Environment, LinePayChannelSecret]
          LINE_PAY_IS_SANDBOX: !FindInMap [EnvironmentMap, !Ref Environment, LinePayIsSandbox]
          LINE_PAY_ORDER_INFO_DB: !FindInMap [EnvironmentMap, !Ref Environment, LINEPayOrderInfoDBName]
          LOGGER_LEVEL: !FindInMap [EnvironmentMap, !Ref Environment, LoggerLevel]
          TTL_DAY: !FindInMap [EnvironmentMap, !Ref Environment, TTLDay]
      Events:
        ConfirmPayment:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /confirm
            Method: post
            RestApiId:
              Ref: LinepayApiGatewayApi
  LinepayApiGatewayApi:
    Properties:
      StageName: !Ref Environment
      OpenApiVersion: 3.0.2
    Type: AWS::Serverless::Api

  LINEPayOrderInfoDB:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions: 
      - 
        AttributeName: "orderId"
        AttributeType: S
      TableName: !FindInMap [EnvironmentMap, !Ref Environment, LINEPayOrderInfoDBName]
      KeySchema: 
      - 
        AttributeName: "orderId"
        KeyType: "HASH"
      ProvisionedThroughput: 
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      TimeToLiveSpecification:
        AttributeName: "expirationDate"
        # True:Reservation Data will be deleted at the specified date, False:Data will not be deleted
        Enabled: !FindInMap [EnvironmentMap, !Ref Environment, TTL]

  FrontBucket:
    Type: AWS::S3::Bucket
    Properties: 
      BucketName: !FindInMap [EnvironmentMap, !Ref Environment, FrontS3BucketName]
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      BucketEncryption: 
        ServerSideEncryptionConfiguration: 
        - 
          ServerSideEncryptionByDefault: 
            SSEAlgorithm: "AES256"
      # ### ACCESS LOG SETTING ###
      # LoggingConfiguration: 
      #   DestinationBucketName: !FindInMap [EnvironmentMap, !Ref Environment, LogS3Bucket]
      #   LogFilePrefix: !FindInMap [EnvironmentMap, !Ref Environment, LogFilePrefix]
      # ### ACCESS LOG SETTING ###
  AssetsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontBucket
      PolicyDocument:
        Version: "2008-10-17"
        Id: "PolicyForCloudFrontPrivateContent"
        Statement:
          - Action: s3:GetObject
            Sid: 1
            Effect: Allow
            Resource: !Sub arn:aws:s3:::${FrontBucket}/*
            Principal:
              AWS: !Sub arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}
            Condition: 
              Bool: 
                "aws:SecureTransport": "true"
          - Action: s3:*
            Sid: 2
            Effect: Deny
            Principal: "*"
            Resource: !Sub arn:aws:s3:::${FrontBucket}
            Condition: 
              Bool: 
                "aws:SecureTransport": "false"

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig: 
        Origins: 
        - 
          ConnectionAttempts: 3
          ConnectionTimeout: 10
          DomainName: !GetAtt FrontBucket.DomainName
          Id: !Sub "S3-${FrontBucket}"
          OriginPath: ""
          S3OriginConfig: 
            OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}
        OriginGroups: 
          Quantity: 0
        DefaultCacheBehavior: 
          AllowedMethods: 
          - "HEAD"
          - "DELETE"
          - "POST"
          - "GET"
          - "OPTIONS"
          - "PUT"
          - "PATCH"
          CachedMethods: 
          - "HEAD"
          - "GET"
          Compress: false
          DefaultTTL: 0
          ForwardedValues: 
            Cookies: 
              Forward: "none"
            QueryString: false
          MaxTTL: 0
          MinTTL: 0
          SmoothStreaming: false
          TargetOriginId: !Sub "S3-${FrontBucket}"
          ViewerProtocolPolicy: "redirect-to-https"
        Comment: ""
        PriceClass: "PriceClass_All"
        Enabled: true
        ViewerCertificate: 
          CloudFrontDefaultCertificate: true
          MinimumProtocolVersion: "TLSv1"
        Restrictions: 
          GeoRestriction: 
            RestrictionType: "none"
        HttpVersion: "http2"
        DefaultRootObject: "index.html"
        IPV6Enabled: true
        Logging: 
          Bucket: !GetAtt FrontBucket.DomainName
          Prefix: log
  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref AWS::StackName

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  ReserveApi:
    Description: "API Gateway endpoint URL for Prod stage for Reserve function"
    Value: !Sub "https://${LinepayApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/reserve/"
  ReserveFunction:
    Description: "Reserve Lambda Function ARN"
    Value: !GetAtt ConfirmFunction.Arn
  ConfirmApi:
    Description: "API Gateway endpoint URL for Prod stage for Confirm function"
    Value: !Sub "https://${LinepayApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/confirm/"
  ConfirmFunction:
    Description: "Confirm Lambda Function ARN"
    Value: !GetAtt ConfirmFunction.Arn
  LambdaLayer:
    Description: "Used Layer at Function"
    Value: 
      !Join 
        - ":"
        - - !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer"
          - !ImportValue LinePayLayerDev
          - !FindInMap [EnvironmentMap, !Ref Environment, LayerVersion]
  CloudFrontDomainName:
    Description: "CloudFront for LINE Pay Demo"
    Value: !GetAtt CloudFrontDistribution.DomainName
  S3:
    Description: "S3 Bucket for Frontend"
    Value: !Ref FrontBucket
    
